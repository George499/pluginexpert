'use strict';

module.exports = {
  register() {},

  bootstrap({ strapi }) {
    // –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∫—Ä–æ–Ω-–∑–∞–¥–∞—á–∏
    strapi.cron.add({
      // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00 —É—Ç—Ä–∞
      '0 3 * * *': async () => {
        strapi.log.info('üïì –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫...');

        try {
          // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–ø–∏–∫–µ—Ä–æ–≤ —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
          const expiredSpeakers = await strapi.entityService.findMany('api::speaker.speaker', {
            filters: {
              subscriptionExpiresAt: {
                $lt: new Date().toISOString(),
              },
              isPaid: true,
            },
            limit: 1000, // –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–∏–º–∏—Ç
          });

          strapi.log.info(`–ù–∞–π–¥–µ–Ω–æ ${expiredSpeakers.length} —Å–ø–∏–∫–µ—Ä–æ–≤ —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π`);

          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ –∏–∑ –Ω–∏—Ö
          for (const speaker of expiredSpeakers) {
            await strapi.entityService.update('api::speaker.speaker', speaker.id, {
              data: {
                isPaid: false,
              },
            });
            strapi.log.info(`‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –¥–ª—è —Å–ø–∏–∫–µ—Ä–∞ ID ${speaker.id}`);
          }

          strapi.log.info('‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        } catch (err) {
          strapi.log.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–æ–¥–ø–∏—Å–æ–∫:', err);
        }
      }
    });
  },
};
